Spc_Emu Notes


Performance
-----------

Performance can be improved by allowing the library to use
processor-specific non-portable features. Define BLARGG_NONPORTABLE to 1
to allow these constructs. Then appropriately define BLARGG_BIG_ENDIAN
or BLARGG_LITTLE_ENDIAN to 1.

The library uses local variables liberally, so register-challenged
processors might not perform as well.

A profile on a 120 MHz PowerPC Mac yielded the following when
synthesizing Super Mario RPG - Story. 2.8 seconds of CPU time were used
to generate 10 seconds of output.

 59%    Spc_Dsp::run
 17%    Spc_Cpu::run
 10%    Spc_Emu::read
  8%    Spc_Dsp::clock_envelope
  5%    Spc_Emu::write

The DSP emulator has been optimized quite a bit, but still has room for
significant improvement. The CPU and SPC modules don't have much room
for significant optimization.


Errors
------

In general, errors are reported via the return value of functions with
an error string, or NULL if the function completed successfully. No
memory allocation is performed by the library. No exceptions are thrown.

If SPC_EMU_DEBUG defined to 1, debug messages about uncommon SPC
behavior are printed, along with other debugging checks.

Assertions are used in strategic places to catch problems.


Misc
----

Chris Moeller's openspc++ library in C++ was quite useful as a
foundation for developing this library.

The skipping functionality hasn't been exercised very much.

Only one thread at a time may invoke functions of a given object. No
static data is used so multiple instances can exist and each can be
accessed concurrently.

An Spc_Emu object is almost 65KB, so it shouldn't be made local to a
function unless the environment has a large stack.

A few more CPU tests need to be performed on a SNES to work out minor
details of behavior. The CPU probably has some inaccuracies. Many DSP
tests need to be run on a SNES to verify aspects of the DSP.


Interface
---------

The basic philosophy is to provide a minimal and sufficient interface;
features can be added if necessary, but not so easily removed. In
particular, there is no way to read/write the four SPC I/O ports, nor
directly access SPC memory. Spc_Emu::load_state() can be used to support
other SNES music formats (like emulator save states).

Samples are generated in 16-bit stereo at 32kHz, left channel first.
Other sample rates can be obtained by resampling the output. Contact me
if you'd like to try my sinc FIR-based resampler.

Functions are named with lowercase words. Functions which perform an
action with side-effects are named with a verb phrase (i.e. load, move,
run). Functions which set or return the value of a piece of state are
named using a noun phrase (i.e. loaded, moved, running).

Classes are named with capitalized words. Only the first letter of an
acronym is capitalized. Class names are nouns, sometimes suggestive of
what they do (i.e. File_Scanner).

Macros are named with all-uppercase words.

Structure, enumeration, and typedefs to these and built-in types are
named using lowercase words with a _t suffix.


-- 
Shay Green <hotpop.com@blargg> (swap to e-mail)
